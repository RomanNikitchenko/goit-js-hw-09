{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","addEventListener","handleSubmit","isPressed","event","preventDefault","elements","delay","step","amount","currentTarget","timerId","number","numDelay","Number","value","numStep","numAmount","setTimeout","createPromise","then","position","console","log","catch","setInterval","clearInterval","Promise","resolve","reject","Math","random"],"mappings":";AACA,MAAMA,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,SAAUC,GAEhC,IAAIC,GAAY,EAEhB,SAASD,EAAaE,GAGhBD,GAFJC,EAAMC,iBAEFF,EACF,OAEFA,GAAY,EAEN,MACJG,UAAU,MAAEC,EAAF,KAASC,EAAT,OAAeC,IACvBL,EAAMM,cAENC,IAAAA,EAAU,KACVC,EAAS,EACTC,EAAWC,OAAOP,EAAMQ,OACxBC,EAAUF,OAAON,EAAKO,OACtBE,EAAYH,OAAOL,EAAOM,OAE9BG,WAAW,KACTC,EAAcP,EAAQC,GACnBO,KAAK,EAAGC,SAAAA,EAAUd,MAAAA,MACjBe,QAAQC,2BAA2BF,QAAed,SAEnDiB,MAAM,EAAGH,SAAAA,EAAUd,MAAAA,MAClBe,QAAQC,0BAA0BF,QAAed,SAGrDI,EAAUc,YAAY,KAGhBb,IAFJA,GAAU,GAEGK,EAGX,OAFAS,cAAcf,QACdR,GAAY,GAMdgB,EAAcP,EAFdC,GAAYG,GAGXI,KAAK,EAAGC,SAAAA,EAAUd,MAAAA,MACjBe,QAAQC,2BAA2BF,QAAed,SAEnDiB,MAAM,EAAGH,SAAAA,EAAUd,MAAAA,MAClBe,QAAQC,0BAA0BF,QAAed,UAElDS,IACFH,GAGL,MAAMM,EAAgB,CAACE,EAAUd,IACxB,IAAIoB,QAAQ,CAACC,EAASC,KAELC,KAAKC,SAAW,GAGpCH,EAAQ,CACNP,SAAUA,EACVd,MAAOA,IAGTsB,EAAO,CACLR,SAAUA,EACVd,MAAOA","file":"03-promises.e1460184.js","sourceRoot":"../src","sourcesContent":["\nconst form = document.querySelector('.form');\n\nform.addEventListener(\"submit\", handleSubmit);\n\nlet isPressed = false;\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  if (isPressed) {\n    return\n  }\n  isPressed = true;\n\n  const {\n    elements: { delay, step, amount }\n  } = event.currentTarget;\n  \n  let timerId = null;\n  let number = 1;\n  let numDelay = Number(delay.value);\n  let numStep = Number(step.value);\n  let numAmount = Number(amount.value);\n\n  setTimeout(() => {\n    createPromise(number, numDelay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n    timerId = setInterval(() => {\n      number += 1;\n\n      if (number > numAmount) {\n        clearInterval(timerId);\n        isPressed = false;\n        return;\n      };\n      \n      numDelay += numStep\n      \n      createPromise(number, numDelay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    }, numStep);\n  }, numDelay);\n};\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    \n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({\n        position: position,\n        delay: delay,\n      });\n    } else {\n      reject({\n        position: position,\n        delay: delay,\n      });\n    }  \n  });\n};\n"]}